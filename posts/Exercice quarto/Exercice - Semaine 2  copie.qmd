---
title: "Exercice - Semaine 2"
format: html
editor: visual
document:
  css: |
    body {
      text-align: justify;
    }
---

## Exercice 2 :

```{r}
library(rvest)
library(dplyr)
library(tidyverse)
library(stringr)

```

#Question 1 :

```{r}
list_tables <-
  session("https://fr.wikipedia.org/wiki/Liste_des_m%C3%A9daill%C3%A9s_olympiques") |>
  html_elements(".wikitable") |>
  html_table()
list_tables
```

Cette instruction nous permet d'effectuer du web scraping sur la page Wikipedia "Liste des médaillés olympiques" afin d'extraire les données présentes sous forme de tableaux. Les informations obtenues sont stockées dans la variable "list_tables", qui est une liste contenant six éléments, chacun représentant l'un des tableaux présents sur la page.

#Question 2 :

```{r}
data_medailles_sport_ete = list_tables[[1]]
data_medailles_sport_ete = data_medailles_sport_ete[-1,-1]
colnames(data_medailles_sport_ete) =  c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or")
data_medailles_sport_ete[, 3:8] <- lapply(data_medailles_sport_ete[, 3:8], as.integer)
str(data_medailles_sport_ete)
```

#Question 3 :

```{r}
data_medailles_sport_ete <- data_medailles_sport_ete |> 
  arrange(desc(Total))
top_3 <- data_medailles_sport_ete[1:3, ]
```

Les trois disciplines qui possédent le plus de médailles sont :

```{r}
for (Discipline in top_3$Discipline) {
  cat("- ", Discipline, "\n")
}
```

#Question 4 :

```{r}
selected_rows <- data_medailles_sport_ete %>%
  filter(Epreuves_2020 == min(Epreuves_2020))
selected_rows$Discipline
```

#Question 5 :

Pour valider les résultats de la colonne "éditions", nous utilisons une fonction spécifique.

```{r}
calcul_edition <- function(annee) {
  Calcul_edition <- str_extract(annee, "(?i)depuis\\s+(\\d{4})") |> 
    str_extract("\\d{4}") |> 
    as.integer()
  
  if (Calcul_edition < 1896 || (Calcul_edition - 1896) %% 4 != 0) {
    stop("Année invalide. L'année doit être 1896 ou ultérieure et un multiple de 4 après 1896.")
  }
  
  edition2 <- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition < 1916, 3, ifelse(Calcul_edition < 1944, 2, 0))
  
  return(edition2)
}
```

```{r}
calcul_edition("depuis 1900")
```

Cependant, nous employons une autre méthode pour vérifier dans la base de données.

```{r}
calcul_nb_editions_int <- function(data) {
  data <- data |> 
    mutate(
      Calcul_edition = str_extract(Annees, "(?i)depuis\\s+(\\d{4})") |> 
                         str_extract("\\d{4}")
    )
  
  data$Calcul_edition <- as.integer(data$Calcul_edition)
  
  resultats <- data |> 
    mutate(
      edition2 = (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition < 1916, 3, ifelse(Calcul_edition < 1944, 2, 0))
    )
  
  resultats_negatifs <- resultats |> 
    filter(edition2 - Editions < 0)

  return(resultats_negatifs)
}
```

```{r}
  calcul_nb_editions_int(data_medailles_sport_ete)

```

La divergence entre les résultats de notre fonction et la colonne "éditions" pour 13 disciplines s'explique par le fait que certaines disciplines ont été réintroduites puis retirées des Jeux Olympiques en fonction des décisions du comité d'organisation.

#Question 6 :

```{r}
calcul_nb_editions_str <- function(x) {
  r <- str_split(x, ",", simplify = TRUE)
  part <- ifelse(!grepl("(?i)depuis|[-—–—]", r[,]), "1", r[,])
  return(part)
}
```

```{r}
calcul_nb_editions_int <- function(part) {
  depuis_years <- str_extract_all(part, "(?i)depuis\\s+(\\d{4})") %>%
    unlist() %>%
    str_extract("\\d+")
  
  Calcul_edition <- as.integer(depuis_years)
  result <- (2024 - Calcul_edition) / 4 - ifelse(Calcul_edition < 1916, 3, ifelse(Calcul_edition < 1944, 2, 0))
  
  part2 <- ifelse(grepl("(?i)depuis\\s+\\d{4}", part), as.character(result), part)
  
  return(part2)
}
```

```{r}
calcul_final <- function(part2) {
  part2_numerique <- as.numeric(part2)
  resultat_final <- sum(part2_numerique)
  return(resultat_final)
}
```

```{r}
calcul_nb_editions <- function(x) {
  part1 <- calcul_nb_editions_str(x)
  part2 <- calcul_nb_editions_int(part1)
  resultat_final <- calcul_final(part2)
  return(resultat_final)
}
```

```{r}
x1 <- calcul_nb_editions_str("1896, 1904, depuis 1920")
x1
x2 <- calcul_nb_editions_int(x1)
x2
x3 <- calcul_final(x2)
x3
calcul_nb_editions("1896, 1904, depuis 1920")
```



```{r}
calcul_nb_editions("1896, 1904, depuis 1920")
```

Il est observé que notre fonction démontre son utilité pour les disciplines programmées de manière discontinue. Cependant, il convient de noter qu'il existe une troisième modalité non prise en considération dans notre fonction, à savoir les modalités de type "1900-1904".

#Question 7 :

```{r}
calcul_nb_editions.character <- function(part2) {
  dates <- str_match(part2, "(\\d{4})\\s*[-—–]\\s*(\\d{4})")
  a <- as.integer(dates[1, 2])
  b <- as.integer(dates[1, 3])
  
  x <- ifelse(a < 1915 & b > 1917, 1, 
              ifelse(a < 1915 & b > 1945, 3, 
                     ifelse(1917 < a & a < 1939 & b > 1945, 2, 0)))
  
  c_value <- (b - a) / 4 + 1 - x
  part3 <- ifelse(grepl("(\\d{4})\\s*[-—–]\\s*(\\d{4})", part2), as.character(c_value), part2)
  return(part3)
}
```

```{r}
calcul_final2 <- function(part3) {
  part3_numerique <- as.numeric(part3)
  resultat_final <- sum(part3_numerique)
  return(resultat_final)
}
```

```{r}
calcul_nb_editions2 <- function(x) {
  part1 <- calcul_nb_editions_str(x)
  part2 <- calcul_nb_editions_int(part1)
  part3 <- calcul_nb_editions.character(part2)
  resultat_final <- calcul_final2(part3)
  
  return(resultat_final)
}
```

```{r}
calcul_nb_editions2("2000")
```

Notre fonction est efficace car elle identifie clairement que toute discipline ayant "2000" comme modalité dans notre colonne "Années" ne comporte qu'une seule édition.

```{r}
calcul_nb_editions2("1904-1924, depuis 1948")
```

Notre fonction est donc applicable à toutes les modalités de notre base de données.

#Question 8 :

```{r}
  calcul_medailles_individuelles <- function(data_frame) {
    medailles_df <- data.frame(
      Athlete = gsub("\\s*\\(.*\\)", "", data_frame$Athletes_medailles),
      Pays = gsub(".*\\((\\w+)\\)", "\\1", data_frame$Athletes_medailles),
      OR = as.integer(gsub(".*\\((\\d+)-\\d+-\\d+\\)", "\\1", data_frame$Athletes_medailles)),
      ARGENT = as.integer(gsub(".*\\(\\d+-(\\d+)-\\d+\\)", "\\1", data_frame$Athletes_medailles)),
      BRONZE = as.integer(gsub(".*\\(\\d+-\\d+-(\\d+)\\)", "\\1", data_frame$Athletes_medailles))
    )
    
    medailles_df$TotalMedailles <- medailles_df$OR + medailles_df$ARGENT + medailles_df$BRONZE
    
    classement_df <- medailles_df[order(-medailles_df$TotalMedailles, -medailles_df$OR, -medailles_df$ARGENT, -medailles_df$BRONZE), ]
    
    meilleurs_athletes <- head(classement_df$Athlete, 3)
    
    phrase <- cat("Les 3 meilleurs athlètes sont:\n", paste("- ", meilleurs_athletes, collapse = "\n"))
    
    return(phrase)
  }
```

#Question 9 :

```{r}
calcul_medailles_individuelles(data_medailles_sport_ete)
```

#Question 10 :

```{r}
extraire_nationalite_athlete <- function(data) {
  medailles_df <- data %>%
    mutate(
      Prénom = str_extract(Athletes_medailles, "^[A-Za-z]+"),
      Nom = str_extract(Athletes_medailles, "(?<= )[A-Za-z]+(?= \\()"),
      Pays = str_extract(Athletes_medailles, "(?<=\\()\\w+(?=\\))"),
      Or = as.numeric(str_extract(Athletes_medailles, "(?<=\\()\\d+(?=-)")),
      Argent = as.numeric(str_extract(Athletes_medailles, "(?<=-)[0-9]+(?=-)")),
      Bronze = as.numeric(str_extract(Athletes_medailles, "(?<=-)\\d+$"))
    )
  pays_liste <- unlist(lapply(strsplit(medailles_df$Pays, "\\)\\s+\\("), function(x) x[length(x)]))
  pays_frequence <- table(pays_liste)
  data_pays <- as.data.frame(pays_frequence)
  colnames(data_pays) <- c("Pays", "Effectif")
  data_pays <- data_pays[order(-data_pays$Effectif), ]
  top3 <- head(data_pays, 3)
  phrase <- cat("Les 3 pays qui posséde le plus de médailles sont:\n", paste("- ", top3$Pays, collapse = "\n"))
  return(top3)
}
```

```{r}
print(extraire_nationalite_athlete(data_medailles_sport_ete))
```

#Question 11 :

Nous extrayons d'abord la base de données. Nous pouvons ensuite appliquer les mêmes réglages à la base de données des sports d'été, car la deuxième base de données contient exactement les mêmes informations que la première.

```{r}
data_medailles_sport_hiver = list_tables[[2]]
data_medailles_sport_hiver = data_medailles_sport_hiver[-1,-1]
colnames(data_medailles_sport_hiver) =  c("Discipline", "Annees", "Editions", "Epreuves_2020", "Or", "Argent", "Bronze", "Total", "Athletes_medailles", "Athletes_or")
data_medailles_sport_ete[, 3:8] <- lapply(data_medailles_sport_ete[, 3:8], as.integer)
str(data_medailles_sport_ete)
```

```{r}
calcul_medailles_individuelles(data_medailles_sport_hiver)

```

```{r}
extraire_nationalite_athlete(data_medailles_sport_hiver)

```
