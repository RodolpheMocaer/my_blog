---
title: "Exercice - Semaine 3"
format: html
editor: visual
document:
  css: |
    body {
      text-align: justify;
    }
---

## Exercice 3:

```{r}
library(stringr)
library(lubridate)
library(arrow)
library(dplyr)
library(tidyr)
library(jsonlite)
library(RSQLite)
```

#Question 1

```{r}
chemin_dossier <- "/Users/rododo/Desktop/ECAP/R avancé/tp3"
fichiers <- list.files(chemin_dossier, full.names = TRUE)
extensions <- tools::file_ext(fichiers)
resultat <- data.frame(Fichier = fichiers, Extension = extensions)
print(resultat)
```

Il est possible d'observer la présence de trois fichiers distincts portant les extensions sqlite, json et parquet, respectivement.

#Question 2:

```{r}
chemin_fichier_parquet <- "/Users/rododo/Desktop/ECAP/R avancé/tp3/tokyo_athletes.parquet"
table_parquet <-read_parquet(chemin_fichier_parquet)
dim(table_parquet)
```

Les Dimensions de la tables sont : - 11085 lignes (observations) - 3 colonnes

```{r}
cat("Le noms des colonnes sont :\n",
    paste("- ", colnames(table_parquet), collapse = "\n"), "\n")
```

#Question 3:

```{r}
chemin_fichier_json <- "/Users/rododo/Desktop/ECAP/R avancé/tp3/olympics_athletes.json"
table_json <- fromJSON(chemin_fichier_json)
dim(table_json)
```

Les Dimensions de la tables sont : - 269731 lignes (observations) - 13 colonnes

```{r}
cat("Le noms des colonnes sont :\n",
    paste("- ", colnames(table_json), collapse = "\n"), "\n")
```

#Question 4:

```{r}
chemin_base_SQL <- "/Users/rododo/Desktop/ECAP/R avancé/tp3/data.sqlit"
connexion <- dbConnect(SQLite(), dbname = chemin_base_SQL)
tables_presentes <- dbListTables(connexion)
print(paste("Tables présentes dans la base de données :", tables_presentes))
```

#Question 5:

```{r}
dbWriteTable(connexion, "olympics_athletes", fromJSON(chemin_fichier_json),overwrite = TRUE)
dbWriteTable(connexion, "tokyo_athletes", read_parquet(chemin_fichier_parquet),overwrite = TRUE)

```

#Question 6:

```{r}
colonnes_olympics_athletes <- dbListFields(connexion, "olympics_athletes")
cat("Le nom des colonnes est :\n")
cat(paste("- ", colonnes_olympics_athletes, collapse = "\n "), "\n")
```

#Question 7:

```{r}
table_olympics_athletes <- dbReadTable(connexion, "olympics_athletes")
olympics_athletes <- as_tibble(table_olympics_athletes)
print(str(olympics_athletes))
```

Nous pouvons constater que la table "olympics_athletes" correspond à celle que nous avons précédemment importée sous le nom de "table_json".

#Question 8:

```{r}
olympics_athletes <- olympics_athletes |> 
  mutate(Sex = as.factor(Sex))
str(olympics_athletes$Sex)
```

Nous constatons que la colonne "SEX" a été correctement transformée en une colonne catégorielle.

#Question 9:

```{r}
olympics_athletes <- olympics_athletes |> 
  separate_wider_delim(Games, delim = " ", names = c("Year", "isSummer"))
```

```{r}
olympics_athletes$Year <- as.integer(olympics_athletes$Year)
str(olympics_athletes$Year)
```

Le type de la colonne "Years" a été effectivement converti en entier.

```{r}
olympics_athletes <- olympics_athletes |> 
  mutate(isSummer = ifelse(isSummer == "Summer", TRUE, FALSE))
```

#Question 10:

```{r}
age_edition <- olympics_athletes |> 
  filter(isSummer) |> 
  group_by(Year) |> 
  summarize(Moyenne_Age = mean(Age, na.rm = TRUE))
print(age_edition)
```

```{r}
jeune <- age_edition[which.min(age_edition$Moyenne_Age), ]
cat(paste("L'édition comprenant les athlètes les plus jeunes est :", jeune$Year))
```

```{r}
vieux <- age_edition[which.max(age_edition$Moyenne_Age), ]
cat(paste("L'édition comprenant les athlètes les plus vieux est :", vieux$Year))

```

#Question 11:

```{r}
olympics_femmes <- olympics_athletes |> 
  filter(Sex == "F")
```

```{r}
discipline_moyenne_taille <- olympics_femmes |> 
  group_by(Sport)  |> 
  summarize(Taille_Moyenne = mean(Height, na.rm = TRUE))  |> 
  slice(which.max(Taille_Moyenne))
```

```{r}
cat("Les athlètes les plus grandes sont retrouvées dans la discipline", discipline_moyenne_taille$Sport,
    "\nElles font en moyenne environ", round(discipline_moyenne_taille$Taille_Moyenne, 2), "cm.")
```

```{r}
discipline_moyenne_taille_edition <- olympics_femmes %>%
  group_by(Year, Sport) %>%
  summarize(Taille_Moyenne = mean(Height, na.rm = TRUE)) %>%
  slice(which.max(Taille_Moyenne))
```

```{r}
cat("La discipline avec la taille moyenne la plus grande pour chaque édition est :\n")
for (year in unique(discipline_moyenne_taille_edition$Year)) {
  discipline_edition <- discipline_moyenne_taille_edition[discipline_moyenne_taille_edition$Year == year, ]
  cat(sprintf("- %s : %s\n", year, discipline_edition$Sport))
}
```

```{r}
nbr_taille_discipline <- discipline_moyenne_taille_edition |> 
  group_by(Sport)  |> 
  summarize(Nombre_Fois = n()) |> 
  arrange(desc(Nombre_Fois))

print(nbr_taille_discipline)

```

Nous pouvons ainsi constater que le basket-ball arrive en première place avec un total de 10 éditions, suivi du bobsleigh, de l'escrime et du volleyball avec un total respectif de 4 éditions chacun.

#Question 12:

```{r}
date <- c("5 Août 2016", "20 Août 2016", "23 Juillet 2021", "8 Août 2021", "26 Juillet 2024", "11 Août 2024")
date_mois <- "\\b\\d{1,2} (?:Janvier|Février|Mars|Avril|Mai|Juin|Juillet|Août|Septembre|Octobre|Novembre|Décembre) \\d{4}\\b"
date_JO <- str_extract_all(date, date_mois)
print(date_JO)
```

#Question 13:

```{r}
mois <- c("Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre")
numeros_mois <- sprintf("\\b%s\\b", paste(seq_along(mois), collapse = "|"))
date_numeros_JO<- str_replace_all(date, setNames(as.character(seq_along(mois)), mois), fixed(numeros_mois))
print(date_numeros_JO)
```

#Question 14:

```{r}
JO_date <- dmy(date_numeros_JO)
print(JO_date)
```

#Question 15:

```{r}
rio_tokyo <- difftime(JO_date[3], JO_date[2], units = "days")
semaine_rio_tokyo <- as.numeric(rio_tokyo) / 7
cat(paste("La clôture des Jeux de Rio et le début de ceux de Tokyo sont séparés exactement de",rio_tokyo,"jours. Cela équivaut à",round(semaine_rio_tokyo, 0),"semaine."))
```

```{r}
tokyo_paris <- difftime(JO_date[5], JO_date[4], units = "days")
semaine_tokyo_paris <- as.numeric(tokyo_paris) / 7
cat(paste("La clôture des Jeux de Tokyo et le début de ceux de Paris sont séparés exactement de",tokyo_paris,"jours. Cela équivaut à",round(semaine_tokyo_paris, 0),"semaine."))
```
