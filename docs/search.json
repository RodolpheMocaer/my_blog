[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Bienvenue sur mon Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Visualisation météorologique",
    "section": "",
    "text": "La librairie olympicsWeather est un package R conçu pour fournir des fonctionnalités liées à l’analyse météorologique des Jeux olympiques. Elle offre des outils pour récupérer, explorer et analyser les données météorologiques associées aux différentes éditions des Jeux olympiques.\n\n\nPour installer le package olympicsWeather depuis GitHub, vous pouvez utiliser le package remotes. Exécutez les commandes suivantes dans la console R :\n\n# Installation du package remotes si ce n'est pas déjà fait\n#if (!requireNamespace(\"remotes\", quietly = #TRUE)) {\n#  install.packages(\"remotes\")\n#}\n\n# Installation du package olympicsWeather depuis GitHub\n#remotes::install_github(\"NomUtilisateur/olympicsWeather\")\n\n\nlibrary(olympicsWeather)\n\nWarning: replacing previous import 'devtools::test_file' by\n'testthat::test_file' when loading 'olympicsWeather'\n\n\nWarning: replacing previous import 'httr2::with_mock' by 'testthat::with_mock'\nwhen loading 'olympicsWeather'\n\n\nWarning: replacing previous import 'httr2::local_mock' by\n'testthat::local_mock' when loading 'olympicsWeather'\n\n\nNous pouvons grâce à notre packages visualiser les données météorologique pour le satde de france.\n\nmétéo &lt;- get_forecast(\"stade de france\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.9 seconds\n\nGraphique_pluie(météo)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\nGraphique_temperature(météo)\n\n\n\n\nDe plus, nous pouvons également visualiser les données météorologique pour tahiti.\n\nmétéo_tahiti &lt;- get_forecast(\"tahiti\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.3 seconds\n\nGraphique_pluie(météo_tahiti)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\nGraphique_temperature(météo_tahiti)\n\n\n\n\nEnfin, nous pouvons visualiser les données météorologique pour les points GPS suivant : . 43.276703, 5.334791.\n\nmétéo_gps &lt;- get_forecast(c(43.276703,5.334791))\nGraphique_pluie(météo_gps)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\nGraphique_temperature(météo_gps)"
  },
  {
    "objectID": "posts/post-with-code/index.html#librairie-olympicsweather",
    "href": "posts/post-with-code/index.html#librairie-olympicsweather",
    "title": "Visualisation météorologique",
    "section": "",
    "text": "La librairie olympicsWeather est un package R conçu pour fournir des fonctionnalités liées à l’analyse météorologique des Jeux olympiques. Elle offre des outils pour récupérer, explorer et analyser les données météorologiques associées aux différentes éditions des Jeux olympiques.\n\n\nPour installer le package olympicsWeather depuis GitHub, vous pouvez utiliser le package remotes. Exécutez les commandes suivantes dans la console R :\n\n# Installation du package remotes si ce n'est pas déjà fait\n#if (!requireNamespace(\"remotes\", quietly = #TRUE)) {\n#  install.packages(\"remotes\")\n#}\n\n# Installation du package olympicsWeather depuis GitHub\n#remotes::install_github(\"NomUtilisateur/olympicsWeather\")\n\n\nlibrary(olympicsWeather)\n\nWarning: replacing previous import 'devtools::test_file' by\n'testthat::test_file' when loading 'olympicsWeather'\n\n\nWarning: replacing previous import 'httr2::with_mock' by 'testthat::with_mock'\nwhen loading 'olympicsWeather'\n\n\nWarning: replacing previous import 'httr2::local_mock' by\n'testthat::local_mock' when loading 'olympicsWeather'\n\n\nNous pouvons grâce à notre packages visualiser les données météorologique pour le satde de france.\n\nmétéo &lt;- get_forecast(\"stade de france\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.9 seconds\n\nGraphique_pluie(météo)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\nGraphique_temperature(météo)\n\n\n\n\nDe plus, nous pouvons également visualiser les données météorologique pour tahiti.\n\nmétéo_tahiti &lt;- get_forecast(\"tahiti\")\n\nPassing 1 address to the ArcGIS single address geocoder\n\n\nQuery completed in: 0.3 seconds\n\nGraphique_pluie(météo_tahiti)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\nGraphique_temperature(météo_tahiti)\n\n\n\n\nEnfin, nous pouvons visualiser les données météorologique pour les points GPS suivant : . 43.276703, 5.334791.\n\nmétéo_gps &lt;- get_forecast(c(43.276703,5.334791))\nGraphique_pluie(météo_gps)\n\nScale for y is already present.\nAdding another scale for y, which will replace the existing scale.\n\n\n\n\nGraphique_temperature(météo_gps)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bienvenue sur Mon Blog",
    "section": "",
    "text": "Bienvenue sur Mon Blog\nVoici les étapes qui m’ont permis de créer mon blog.\n\n\nCréation du projet de sites sous github\n\n\nLa mise en place du packages sous github\n\n\nLe post de blog.\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nVisualisation météorologique\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nExercice antérieure\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2024\n\n\nRodolphe MOCAER\n\n\n\n\n\n\n  \n\n\n\n\nBienvenue sur mon Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nMar 2, 2024\n\n\nRodolphe MOCAER\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#etape-1",
    "href": "index.html#etape-1",
    "title": "Bienvenue sur Mon Blog",
    "section": "Etape 1",
    "text": "Etape 1\nLa composition du projet comprend plusieurs fichiers, dont index.qmd qui sert de page d’accueil à notre blog, ainsi que _quarto.yml, le fichier de configuration spécifique à Quarto."
  },
  {
    "objectID": "index.html#etape-2",
    "href": "index.html#etape-2",
    "title": "Bienvenue sur Mon Blog",
    "section": "Etape 2",
    "text": "Etape 2"
  },
  {
    "objectID": "index.html#etape-3",
    "href": "index.html#etape-3",
    "title": "Bienvenue sur Mon Blog",
    "section": "Etape 3",
    "text": "Etape 3\nCréation d’un nouveau projet github"
  },
  {
    "objectID": "index.html#etape-4",
    "href": "index.html#etape-4",
    "title": "Bienvenue sur Mon Blog",
    "section": "Etape 4",
    "text": "Etape 4\nConfiguration des paramétres grâce aux commandes bash : - git config user.name “” - git config user.email “”\nVérification de la bonne configuration des paramétres : - git config user.name - git config user.email"
  },
  {
    "objectID": "index.html#etape-5",
    "href": "index.html#etape-5",
    "title": "Bienvenue sur Mon Blog",
    "section": "Etape 5",
    "text": "Etape 5\nConfiguration du remote grâce à la commande bash : git remote add git@github.com:/my_blog.git. De plus nous vérfier grace à cette commande bash : git remote -v que la configuration est bonne en effet, cette commande dans renvoyer 2 lignes (une pour push et une fetch)"
  },
  {
    "objectID": "index.html#etape-6",
    "href": "index.html#etape-6",
    "title": "Bienvenue sur Mon Blog",
    "section": "Etape 6",
    "text": "Etape 6\nTous les dossiers sont exporté vers Github."
  },
  {
    "objectID": "posts/Exercice quarto/index copie.html",
    "href": "posts/Exercice quarto/index copie.html",
    "title": "Exercice antérieure",
    "section": "",
    "text": "library(geosphere)\nlibrary(tidygeocoder)\nlibrary(leaflet)\n\n##Question 1 :\n##Question 2 :\n\ndata_ex = read.csv2(\"/Users/rododo/Desktop/ECAP/R avancé/paris-2024-sites-olympiques-et-paralympiques-franciliens.csv\")\ndata_ex = data.frame(data_ex)\n\n\nnames(data_ex)\n\n[1] \"geo_point\"                      \"nom\"                           \n[3] \"sites_olympiques_paralympiques\" \"sports\"                        \n\nstr(data_ex)\n\n'data.frame':   31 obs. of  4 variables:\n $ geo_point                     : chr  \"48.841319, 2.253076\" \"48.924388, 2.359871\" \"48.92467, 2.332428\" \"48.815115, 2.08208\" ...\n $ nom                           : chr  \"Parc des Princes\" \"Stade de France\" \"Village olympique\" \"Château de Versailles\" ...\n $ sites_olympiques_paralympiques: chr  \"Site olympique\" \"Site olympique,Site paralympique\" \"\" \"Site olympique,Site paralympique\" ...\n $ sports                        : chr  \"Football\" \"Athlétisme,Para athlétisme,Rugby\" \"\" \"Sports équestres,Para équitation,Pentathlon moderne\" ...\n\n\nIl est possible de constater la présenvce de quatres colonnes désignées par les noms “geo_point”, “nom”, “sites_olympiques_paralympiques”, et “sport”. En outre, la première colonne renferme les coordonnées géographiques des sites (latitude, longitude), la seconde contient les noms des lieux, la troisième spécifie si le lieu accueille des épreuves olympiques, paralympiques, ou les deux, tandis que la dernière colonne correspond au sport pratiqué sur le site.\n\ndim(data_ex)\n\n[1] 31  4\n\n\nNous pouvons voir que le data frame contient 31 lignes.\n##Question 3 :\n\nphrases_a_rechercher &lt;- c(\"Site olympique\")\nresultat_olymp &lt;- data_ex[grep(paste(phrases_a_rechercher, collapse=\"|\"), data_ex$sites_olympiques_paralympiques), ]\nprint(nrow(resultat_olymp))\n\n[1] 26\n\nprint(table(resultat_olymp$sites_olympiques_paralympiques))\n\n\n                  Site olympique Site olympique,Site paralympique \n                              10                               16 \n\n\nIl est notable qu’il existe précisément 26 sites olympiques, dont 16 sont également désignés comme sites paralympiques.\n##Question 4 :\n\nphrases_a_rechercher &lt;- c(\"Site paralympique\")\nresultat_para &lt;- data_ex[grep(paste(phrases_a_rechercher, collapse=\"|\"), data_ex$sites_olympiques_paralympiques), ]\nprint(nrow(resultat_para))\n\n[1] 19\n\nprint(table(resultat_para$sites_olympiques_paralympiques))\n\n\nSite olympique,Site paralympique                Site paralympique \n                              16                                3 \n\n\nIl est observé qu’il existe précisément 19 sites paralympiques, parmi lesquels 16 sont simultanément désignés comme sites olympiques.\n##Question 5 :\n\nresultat_sport &lt;- data_ex[grep(\",\", data_ex$sports), ]\nprint(nrow(resultat_sport))\n\n[1] 19\n\n\nAu sein de l’ensemble des sites, on constate la présence de 19 installations qui accueillent diverses disciplines sportives. Ces 19 sites comprennent :\n\nfor (nom in resultat_sport$nom) {\n  cat(\"- \", nom, \"\\n\")\n}\n\n-  Stade de France \n-  Château de Versailles \n-  Grand Palais \n-  Invalides \n-  Pont d'Iéna \n-  Arena Bercy \n-  Arena Paris nord \n-  Arena Paris Sud 6 (Porte de Versailles) \n-  Stade de la Concorde \n-  Arena Champs de Mars \n-  Stade Tour Eiffel \n-  Arena La Chapelle \n-  Centre aquatique \n-  Arena Paris Sud 1 (Porte de Versailles) \n-  Arena Paris Sud 4 (Porte de Versailles) \n-  La Défense Arena \n-  Stade nautique \n-  Vélodrome National de Saint-Quentin-en-Yvelines \n-  Stade Roland Garros \n\n\n##Question 6 :\n\nphrases_a_rechercher &lt;- c(\"Site paralympique\")\nresultat_para_filtre &lt;- resultat_sport[grep(paste(phrases_a_rechercher, collapse=\"|\"), resultat_sport$sites_olympiques_paralympiques), ]\nprint(table(resultat_para_filtre$sites_olympiques_paralympiques))\n\n\nSite olympique,Site paralympique \n                              16 \n\n\nIl est à noter que seize sites, dédiés à plusieurs disciplines sportives, accueillent également au moins une discipline sportive paralympique.\n##Question 7 :\n\ndata_ex$nb_virgules &lt;- sapply(strsplit(as.character(data_ex$sports), \",\"), function(x) length(x) - 1)\nmax_virgules &lt;- max(data_ex$nb_virgules)\nlignes_max_virgules &lt;- data_ex[data_ex$nb_virgules == max_virgules, ]\nprint(max_virgules)\n\n[1] 3\n\nprint(nrow(lignes_max_virgules))\n\n[1] 8\n\n\nNous observons la présence de huit sites, chacun proposant un accueil sportif pour trois disciplines, ce nombre représentant le maximum pour les Jeux Olympiques de Paris. Ces sites étant :\n\nfor (nom in lignes_max_virgules$nom) {\n  cat(\"- \", nom, \"\\n\")\n}\n\n-  Grand Palais \n-  Invalides \n-  Arena Bercy \n-  Arena Paris nord \n-  Stade de la Concorde \n-  Arena Champs de Mars \n-  Arena La Chapelle \n-  Stade nautique \n\n\n##Question 8 :\n\ndata_ex$nb_sports &lt;- strsplit (as.character(data_ex$sports), \",\")\n\n\ndisciplines &lt;- unique(unlist(data_ex$nb_sports))\nsites_disciplines &lt;- numeric(length = length(disciplines))\n\nfor (i in seq_along(disciplines)) {\n  sites_disciplines[i] &lt;- sum(sapply(data_ex$nb_sports, function(x) disciplines[i] %in% x))\n}\n\nmax_discipline_sites &lt;- disciplines[which.max(sites_disciplines)]\nmax_sites_discipline &lt;- data_ex[sapply(data_ex$nb_sports, function(x) max_discipline_sites %in% x),]\n\n\ncat(\"La discipline\", max_discipline_sites, \"sera celle qui se déroulera sur le plus grand nombre de sites.\", \"\\n\")\n\nLa discipline Athlétisme sera celle qui se déroulera sur le plus grand nombre de sites. \n\ncat(\"Les sites associés à cette discipline sont :\\n\",\n    paste(\"- \", max_sites_discipline$nom, collapse = \"\\n\"), \"\\n\")\n\nLes sites associés à cette discipline sont :\n -  Stade de France\n-  Invalides\n-  Pont d'Iéna\n-  Hôtel de ville de Paris \n\n\n##Question 9 :\nSéparation de la colonnes géo_point en 2 afin d’avoir les latitudes et longitudes séparer.\n\ngeo_coords &lt;- strsplit(as.character(data_ex$geo_point), \",\")\ndata_ex$geo_lat &lt;- as.numeric(sapply(geo_coords, function(x) x[1]))\ndata_ex$geo_lon &lt;- as.numeric(sapply(geo_coords, function(x) x[2]))\ndata_ex$geo_point &lt;- NULL\n\nPar conséquent, nous identifions les sites les plus proches à vol d’oiseau.\n\nhaversine_distance &lt;- function(lat1, lon1, lat2, lon2) {\n  distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)\n}\nmin_distance &lt;- Inf\nnom_site1 &lt;- ''\nnom_site2 &lt;- ''\nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i + 1):nrow(data_ex)) {\n    distance &lt;- haversine_distance(data_ex$geo_lat[i], data_ex$geo_lon[i], data_ex$geo_lat[j], data_ex$geo_lon[j])\n        if (distance &lt; min_distance) {\n      min_distance &lt;- distance\n      nom_site1 &lt;- data_ex$nom[i]\n      nom_site2 &lt;- data_ex$nom[j]\n    }\n  }\n}\n\n\ncat(\"Les deux sites les plus proches sont :\", nom_site1, \"et\", nom_site2, \"\\n\")\n\nLes deux sites les plus proches sont : Stade BMX de Saint-Quentin-en-Yvelines et Vélodrome National de Saint-Quentin-en-Yvelines \n\n\n\n\nNous identifions les sites les plus éloignés à vol d’oiseau.\n\nhaversine_distance &lt;- function(lat1, lon1, lat2, lon2) {\n  distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)\n}\nmax_distance &lt;- 0\nnom_site1 &lt;- ''\nnom_site2 &lt;- ''\nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i + 1):nrow(data_ex)) {\n    distance &lt;- haversine_distance(data_ex$geo_lat[i], data_ex$geo_lon[i], data_ex$geo_lat[j], data_ex$geo_lon[j])\n        if (distance &gt; max_distance) {\n      max_distance &lt;- distance\n      nom_site1 &lt;- data_ex$nom[i]\n      nom_site2 &lt;- data_ex$nom[j]\n    }\n  }\n}\n\n\ncat(\"Les deux sites les plus loins sont :\", nom_site1, \"et\", nom_site2, \"\\n\")\n\nLes deux sites les plus loins sont : Colline d'Elancourt et Stade nautique \n\n\n\n\n\n\nbarycentre_lat &lt;- sum(data_ex$geo_lat) / nrow(data_ex)\nbarycentre_lon &lt;- sum(data_ex$geo_lon) / nrow(data_ex)\ncat(\"Les coordonnées du barycentre sont : (\", barycentre_lat, \",\", barycentre_lon, \")\\n\")\n\nLes coordonnées du barycentre sont : ( 48.86684 , 2.29757 )\n\n\n\ncoords &lt;- data.frame(lat = barycentre_lat, lon = barycentre_lon)\nresult &lt;- tidygeocoder::reverse_geocode(coords, lat = \"lat\", lon = \"lon\", method = \"osm\")\n\nPassing 1 coordinate to the Nominatim single coordinate geocoder\n\n\nQuery completed in: 1 seconds\n\ncat(\"L'adresse correspondant aux coordonnées (\", coords$lat, \",\", coords$lon, \") est :\\n\", result$address, \"\\n\")\n\nL'adresse correspondant aux coordonnées ( 48.86684 , 2.29757 ) est :\n 23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France \n\n\nNous pouvons visualiser l’emplacement grâce à une carte :\n\nma_carte &lt;- leaflet() %&gt;%\n  addTiles() %&gt;%\n  addMarkers(lng = barycentre_lon, lat = barycentre_lat, popup = \"Barycentre\")\nma_carte"
  },
  {
    "objectID": "posts/Exercice quarto/index copie.html#question-10",
    "href": "posts/Exercice quarto/index copie.html#question-10",
    "title": "Exercice antérieure",
    "section": "",
    "text": "Nous identifions les sites les plus éloignés à vol d’oiseau.\n\nhaversine_distance &lt;- function(lat1, lon1, lat2, lon2) {\n  distm(c(lon1, lat1), c(lon2, lat2), fun = distHaversine)\n}\nmax_distance &lt;- 0\nnom_site1 &lt;- ''\nnom_site2 &lt;- ''\nfor (i in 1:(nrow(data_ex) - 1)) {\n  for (j in (i + 1):nrow(data_ex)) {\n    distance &lt;- haversine_distance(data_ex$geo_lat[i], data_ex$geo_lon[i], data_ex$geo_lat[j], data_ex$geo_lon[j])\n        if (distance &gt; max_distance) {\n      max_distance &lt;- distance\n      nom_site1 &lt;- data_ex$nom[i]\n      nom_site2 &lt;- data_ex$nom[j]\n    }\n  }\n}\n\n\ncat(\"Les deux sites les plus loins sont :\", nom_site1, \"et\", nom_site2, \"\\n\")\n\nLes deux sites les plus loins sont : Colline d'Elancourt et Stade nautique"
  },
  {
    "objectID": "posts/Exercice quarto/index copie.html#question-11",
    "href": "posts/Exercice quarto/index copie.html#question-11",
    "title": "Exercice antérieure",
    "section": "",
    "text": "barycentre_lat &lt;- sum(data_ex$geo_lat) / nrow(data_ex)\nbarycentre_lon &lt;- sum(data_ex$geo_lon) / nrow(data_ex)\ncat(\"Les coordonnées du barycentre sont : (\", barycentre_lat, \",\", barycentre_lon, \")\\n\")\n\nLes coordonnées du barycentre sont : ( 48.86684 , 2.29757 )\n\n\n\ncoords &lt;- data.frame(lat = barycentre_lat, lon = barycentre_lon)\nresult &lt;- tidygeocoder::reverse_geocode(coords, lat = \"lat\", lon = \"lon\", method = \"osm\")\n\nPassing 1 coordinate to the Nominatim single coordinate geocoder\n\n\nQuery completed in: 1 seconds\n\ncat(\"L'adresse correspondant aux coordonnées (\", coords$lat, \",\", coords$lon, \") est :\\n\", result$address, \"\\n\")\n\nL'adresse correspondant aux coordonnées ( 48.86684 , 2.29757 ) est :\n 23, Avenue Pierre 1er de Serbie, Quartier de Chaillot, Paris 16e Arrondissement, Paris, Île-de-France, France métropolitaine, 75116, France \n\n\nNous pouvons visualiser l’emplacement grâce à une carte :\n\nma_carte &lt;- leaflet() %&gt;%\n  addTiles() %&gt;%\n  addMarkers(lng = barycentre_lon, lat = barycentre_lat, popup = \"Barycentre\")\nma_carte"
  }
]